server:
  port: 8801
eureka:
  instance:
    hostname: localhost
  server:
    #关闭自我保护模式(默認為true)
    enable-self-preservation: false
  client:
    # 进行注册（高可用配置、默认配置true）
    registerWithEureka: false
    # 获取注册信息（高可用配置、默认配置true）
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/


#---
## 高可用Eureka-Server
## 当成千上万的服务提供者都向它单节点的服务注册中心进行注册时，它的负载是非常高的。
## 一旦这个单节点的服务注册中心挂掉，则所有服务提供者的注册信息都将变得不可用。
#
## 高可用节点1的配置
#server:
#  port: 8801
#spring:
#  # 标签
#  profiles: peer1
#  # 服务名保持一致
#  application:
#    name: eureka-ha
#eureka:
#  instance:
#    hostname: peer1
#  client:
#    # 进行注册（高可用配置、默认配置true）
#    # registerWithEureka: false
#    # 获取注册信息（高可用配置、默认配置true）
#    # fetchRegistry: false
#    serviceUrl:
#      # 节点1向节点2/3进行服务注册
#      defaultZone: http://peer2:8802/eureka/,http://peer3:8803/eureka/
#
#---
## 高可用节点2的配置
#server:
#  port: 8802
#spring:
#  profiles: peer2
#  application:
#    name: eureka-ha
#eureka:
#  instance:
#    hostname: peer2
#  client:
#    serviceUrl:
#      # 节点2向节点1/3进行服务注册
#      defaultZone: http://peer1:8801/eureka/,http://peer3:8803/eureka/
#
#---
## 高可用节点3的配置
#server:
#  port: 8803
#spring:
#  profiles: peer3
#  application:
#    name: eureka-ha
#eureka:
#  instance:
#    hostname: peer3
#  client:
#    serviceUrl:
#      # 节点3向节点1/2进行服务注册
#      defaultZone: http://peer1:8801/eureka/,http://peer2:8802/eureka/
#
## Eureka高可用，节点均出现在unavailable-replicas下：
## 由于我们在yml文件里设置了类似defaultZone: http://localhost:8801/eureka/,http://localhost:8802/eureka/, 符合上述问题， 所以这里的注册url不能设置为localhost
## 看来，还是需要自己搞定DNS，对应我Windows的环境，也就是要修改host设置。
## 修改HOST请自行谷歌，在host文件下添加三行：
## 127.0.0.1	peer1
## 127.0.0.1	peer2
## 127.0.0.1	peer3